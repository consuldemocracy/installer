---
- name: Check that errbit repo exists
  stat:
    path: "{{ errbit_dir }}"
  register: errbit_repo

- name: Clone Errbit repository
  shell: "git clone https://github.com/errbit/errbit.git {{ errbit_dir }}"
  when: errbit_repo.stat.exists == False

- name: Create log folder
  file:
    path: "{{ errbit_dir }}/log"
    state: directory

- name: Read Ruby version needed by Errbit
  shell: "cat .ruby-version"
  args:
    chdir: "{{ errbit_dir }}"
  register: errbit_ruby_version

- name: Install Ruby version needed by Errbit
  include_role:
    name: galaxy/rvm.ruby
    tasks_from: rubies
  vars:
    rvm1_user: "{{ deploy_user }}"
    rvm1_rubies: ["ruby-{{ errbit_ruby_version.stdout }}"]

- name: Get libv8-node version dependency
  shell: "cat Gemfile.lock | grep 'libv8-node (' | head -n 1 | sed 's/.*(\\(.*\\))/\\1/'"
  register: libv8_version
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Install libv8-node for the right platform
  shell: "{{ rvm_command }} && gem install libv8-node --version '{{ libv8_version.stdout }}' --platform x86_64-linux-libc"
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Get mini_racer version dependency
  shell: "cat Gemfile.lock | grep 'mini_racer (' | sed 's/.*(\\(.*\\))/\\1/'"
  register: mini_racer_version
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Install the mini_racer gem
  shell: "{{ rvm_command }} && gem install mini_racer --version '{{ mini_racer_version.stdout }}'"
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Install Errbit dependencies
  shell: "{{ rvm_command }} && bundle install"
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Create environment file
  file:
    path: "{{ errbit_dir }}/.env"
    state: touch

- name: Update host configuration
  lineinfile:
    path: "{{ errbit_dir }}/.env"
    line: "ERRBIT_HOST={{ errbit_domain }}"

- name: Check whether the secret key is already defined
  lineinfile:
    state: absent
    path: "{{ errbit_dir }}/.env"
    regexp: "^SECRET_KEY_BASE="
  check_mode: true
  changed_when: false
  register: existing_secret_key_base

- when: not existing_secret_key_base.found
  block:
    - name: Generate secret key
      shell: "{{ rvm_command }} && bin/rake secret"
      register: secret_key_base
      args:
        chdir: "{{ errbit_dir }}"
        executable: /bin/bash

    - name: Update secret_key_base configuration
      lineinfile:
        path: "{{ errbit_dir }}/.env"
        line: "SECRET_KEY_BASE={{ secret_key_base.stdout }}"

    - name: Setup Errbit
      shell: "{{ rvm_command }} && RAILS_ENV={{ env }} bin/rake errbit:bootstrap"
      args:
        chdir: "{{ errbit_dir }}"
        executable: /bin/bash

    - name: Precompile Errbit assets
      shell: "{{ rvm_command }} && RAILS_ENV={{ env }} bin/rake assets:precompile"
      args:
        chdir: "{{ errbit_dir }}"
        executable: /bin/bash

- name: Copy Errbit service file to the systemd folder
  become: true
  become_user: root
  template:
    src: "{{ playbook_dir }}/roles/errbit/templates/errbit.service"
    dest: "/etc/systemd/system/{{ errbit_service }}.service"

- name: Start Errbit
  become: true
  become_user: root
  systemd:
    name: "{{ errbit_service }}"
    daemon_reload: yes
    state: started
    enabled: true

- name: Create app if it does not exist
  shell: '{{ rvm_command }} && bin/rails runner -e {{ env }} "App.create(name: \"{{ domain }}\")"'
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Read app key
  shell: "mongo --eval \"db.apps.findOne({ name: '{{ domain }}' }).api_key\" --quiet errbit_{{ env }}"
  register: errbit_api_key
  args:
    chdir: "{{ errbit_dir }}"
    executable: /bin/bash

- name: Add Errbit API key to CONSUL DEMOCRACY secrets file
  replace:
    path: "{{ shared_dir }}/config/secrets.yml"
    regexp: '^  errbit_project_key:(.+)$'
    replace: '  errbit_project_key: "{{ errbit_api_key.stdout }}"'

- name: Add Errbit host to CONSUL DEMOCRACY secrets file
  replace:
    path: "{{ shared_dir }}/config/secrets.yml"
    regexp: '^  errbit_host:(.+)$'
    replace: '  errbit_host: "https://{{ errbit_domain }}"'

- name: Restart CONSUL DEMOCRACY
  shell: "{{ rvm_command }} && bin/rails restart RAILS_ENV={{ env }} EXECJS_RUNTIME=Disabled"
  args:
    chdir: "{{ release_dir }}"
    executable: /bin/bash

- name: Generate SSL certificate
  become: true
  become_user: root
  command: "certbot certonly --nginx --noninteractive --agree-tos --expand -d {{ domain }},{{ errbit_domain }}"
  when: lookup("env", "CI") != "true"

- name: Update nginx configuration
  become: true
  become_user: root
  template:
    src: "{{ playbook_dir }}/roles/errbit/templates/errbit.example.com"
    dest: /etc/nginx/sites-enabled/errbit
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"

- name: Restart Nginx
  become: true
  become_user: root
  service:
    name: nginx
    state: restarted
    enabled: true
